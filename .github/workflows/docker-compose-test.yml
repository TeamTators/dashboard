name: docker-compose-test

on:
  workflow_call:
  push:
    branches:
      - '*'
      - '!deploy'
      - '!gh-pages'

permissions:
  contents: read

jobs:
  docker-compose-tests:
    # this has a chance of infinite loop if we write a test wrong, timeout should catch it eventually.
    timeout-minutes: 5
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Checkout Repository
        uses: actions/checkout@v4

      # - name: Setup Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: v22.12.0

      # - name: Install pnpm
      #   uses: pnpm/action-setup@v4
      #   with:
          # version: 10.13.1

      # - name: Install Dependencies
      #   run: pnpm i

      - name: Initialize .docker.env
        run: |
          echo "DB_USER=test_user" > .docker.env
          echo "DB_PASS=test" >> .docker.env
          echo "DB_NAME=test" >> .docker.env
          echo "DB_HOST=localhost" >> .docker.env
          echo "DB_PORT=5432" >> .docker.env

      - name: Set up Postgres
        run: |
          docker compose --project-name test up -d db
          for i in {1..10}; do
            state=$(docker compose --project-name test ps --services --filter "status=running" | grep -w db)
            if [ "$state" = "db" ]; then
              echo "db service is running"
              break
            fi
            echo "Waiting for db service to be running ($i/10)..."
            sleep 1
          done
          docker ps
          docker exec -it db psql -U admin -c "CREATE ROLE test_user WITH LOGIN PASSWORD 'test';"
          docker exec -it db psql -U admin -c "CREATE DATABASE test WITH OWNER test_user;"
          docker exec -it db psql -U admin -c "GRANT admin TO test_user;"
          # pnpm db:migrate
          # pnpm db:push --force
          docker compose stop

      # - name: Reinitialize .docker.env for cross-docker communication
      #   run: |
      #     rm .docker.env
      #     echo "DB_USER=test_user" > .docker.env
      #     echo "DB_PASS=test" >> .docker.env
      #     echo "DB_NAME=test" >> .docker.env
      #     echo "DB_HOST=db" >> .docker.env
      #     echo "DB_PORT=5432" >> .docker.env
      #     echo "DB_HOST=localhost" >> .env
      #     echo "SECRET_OAUTH2_CLIENT_ID=1234567890" >> .env
      #     echo "PUBLIC_APP_NAME=test" >> .env
      #     echo "SECRET_OAUTH2_CLIENT_SECRET=1234567890" >> .env
      #     echo "PUBLIC_APP_NAME=test" >> .env
      #     echo "REDIS_NAME=some_name" >> .env

      # - name: Start App
      #   run: |
      #     docker compose up -d app
      #     docker compose logs -f app
      #     pnpm test:integration

      # - name: Stop Application
      #   run: docker compose down -v
