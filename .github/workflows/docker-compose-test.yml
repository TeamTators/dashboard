name: docker-compose-test

on:
  workflow_call:
  push:
    branches:
      - '*'
      - '!deploy'
      - '!gh-pages'

permissions:
  contents: read

jobs:
  docker-compose-tests:
    # this has a chance of infinite loop if we write a test wrong, timeout should catch it eventually.
    timeout-minutes: 5
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize .docker.env
        run: |
          echo "DB_USER=test_user" > .docker.env
          echo "DB_PASS=test" >> .docker.env
          echo "DB_NAME=test" >> .docker.env
          echo "DB_PORT=5432" >> .docker.env
          echo "SECRET_OAUTH2_CLIENT_ID=1234567890" >> .docker.env
          echo "PUBLIC_APP_NAME=test" >> .docker.env
          echo "SECRET_OAUTH2_CLIENT_SECRET=1234567890" >> .docker.env
          echo "PUBLIC_APP_NAME=test" >> .docker.env
          echo "REDIS_NAME=some_name" >> .docker.env
          echo "REDIS_URL=redis://redis:6379" >> .docker.env
          echo "ENVIRONMENT=test" >> .docker.env
          echo "PORT=3000" >> .docker.env
          echo "DB_HOST=db" >> .docker.env


          echo "DB_USER=test_user" > .env
          echo "DB_PASS=test" >> .env
          echo "DB_NAME=test" >> .env
          echo "DB_PORT=5432" >> .env
          echo "SECRET_OAUTH2_CLIENT_ID=1234567890" >> .env
          echo "PUBLIC_APP_NAME=test" >> .env
          echo "SECRET_OAUTH2_CLIENT_SECRET=1234567890" >> .env
          echo "PUBLIC_APP_NAME=test" >> .env
          echo "REDIS_NAME=some_name" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          echo "ENVIRONMENT=test" >> .env
          echo "PORT=3000" >> .env
          echo "DB_HOST=localhost" >> .env

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: v22.12.0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: Install Dependencies
        run: pnpm i

      - name: Set up Postgres
        run: |
          docker compose --project-name test up -d db
          docker exec db bash -c '
            for i in $(seq 1 15); do
              pg_isready -U admin && exit 0
              sleep 1
            done
            echo "Postgres did not become ready in time" >&2
            exit 1
          '
          docker exec db psql -U admin -c "CREATE ROLE test_user WITH LOGIN PASSWORD 'test';"
          docker exec db psql -U admin -c "CREATE DATABASE test WITH OWNER test_user;"
          docker exec db psql -U admin -c "GRANT admin TO test_user;"

          cp .env .cp

          pnpm db:migrate
          pnpm db:push --force

      - name: Set up Redis
        run: |
          docker compose --project-name test up -d redis
          docker exec redis bash -c '
            for i in $(seq 1 15); do
              redis-cli ping && exit 0
              sleep 1
            done
            echo "Redis did not become ready in time" >&2
            exit 1
          '


      - name: Debug Docker images
        run: |
          echo "Listing all docker images:"
          docker images
          echo "Compose images for project 'test':"
          docker compose --project-name test images
          echo "Compose ps for project 'test':"
          docker compose --project-name test ps


      - name: Build app
        run: pnpm build

      - name: Start App
        run: |
          docker compose --project-name test up -d app
          pnpm test:integration

      - name: Scan Docker image with Trivy
        run: |
          docker build -t test .
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image test

      - name: Stop Application
        run: docker compose down
